// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2023 02:17:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mbr_circ1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mbr_circ1_vlg_sample_tst(
	a,
	b,
	c,
	d,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mbr_circ1_vlg_check_tst (
	f1,
	f2,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	sampler_rx
);
input  f1;
input  f2;
input  p1;
input  p2;
input  p3;
input  p4;
input  p5;
input  p6;
input sampler_rx;

reg  f1_expected;
reg  f2_expected;
reg  p1_expected;
reg  p2_expected;
reg  p3_expected;
reg  p4_expected;
reg  p5_expected;
reg  p6_expected;

reg  f1_prev;
reg  f2_prev;
reg  p1_prev;
reg  p2_prev;
reg  p3_prev;
reg  p4_prev;
reg  p5_prev;
reg  p6_prev;

reg  f1_expected_prev;
reg  f2_expected_prev;
reg  p1_expected_prev;
reg  p2_expected_prev;
reg  p3_expected_prev;
reg  p4_expected_prev;
reg  p5_expected_prev;
reg  p6_expected_prev;

reg  last_f1_exp;
reg  last_f2_exp;
reg  last_p1_exp;
reg  last_p2_exp;
reg  last_p3_exp;
reg  last_p4_exp;
reg  last_p5_exp;
reg  last_p6_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	f1_prev = f1;
	f2_prev = f2;
	p1_prev = p1;
	p2_prev = p2;
	p3_prev = p3;
	p4_prev = p4;
	p5_prev = p5;
	p6_prev = p6;
end

// update expected /o prevs

always @(trigger)
begin
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
	p1_expected_prev = p1_expected;
	p2_expected_prev = p2_expected;
	p3_expected_prev = p3_expected;
	p4_expected_prev = p4_expected;
	p5_expected_prev = p5_expected;
	p6_expected_prev = p6_expected;
end



// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 

// expected p1
initial
begin
	p1_expected = 1'bX;
end 

// expected p2
initial
begin
	p2_expected = 1'bX;
end 

// expected p3
initial
begin
	p3_expected = 1'bX;
end 

// expected p4
initial
begin
	p4_expected = 1'bX;
end 

// expected p5
initial
begin
	p5_expected = 1'bX;
end 

// expected p6
initial
begin
	p6_expected = 1'bX;
end 
// generate trigger
always @(f1_expected or f1 or f2_expected or f2 or p1_expected or p1 or p2_expected or p2 or p3_expected or p3 or p4_expected or p4 or p5_expected or p5 or p6_expected or p6)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f1 = %b | expected f2 = %b | expected p1 = %b | expected p2 = %b | expected p3 = %b | expected p4 = %b | expected p5 = %b | expected p6 = %b | ",f1_expected_prev,f2_expected_prev,p1_expected_prev,p2_expected_prev,p3_expected_prev,p4_expected_prev,p5_expected_prev,p6_expected_prev);
	$display("| real f1 = %b | real f2 = %b | real p1 = %b | real p2 = %b | real p3 = %b | real p4 = %b | real p5 = %b | real p6 = %b | ",f1_prev,f2_prev,p1_prev,p2_prev,p3_prev,p4_prev,p5_prev,p6_prev);
`endif
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end
	if (
		( p1_expected_prev !== 1'bx ) && ( p1_prev !== p1_expected_prev )
		&& ((p1_expected_prev !== last_p1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p1_exp = p1_expected_prev;
	end
	if (
		( p2_expected_prev !== 1'bx ) && ( p2_prev !== p2_expected_prev )
		&& ((p2_expected_prev !== last_p2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p2_exp = p2_expected_prev;
	end
	if (
		( p3_expected_prev !== 1'bx ) && ( p3_prev !== p3_expected_prev )
		&& ((p3_expected_prev !== last_p3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_p3_exp = p3_expected_prev;
	end
	if (
		( p4_expected_prev !== 1'bx ) && ( p4_prev !== p4_expected_prev )
		&& ((p4_expected_prev !== last_p4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_p4_exp = p4_expected_prev;
	end
	if (
		( p5_expected_prev !== 1'bx ) && ( p5_prev !== p5_expected_prev )
		&& ((p5_expected_prev !== last_p5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p5_expected_prev);
		$display ("     Real value = %b", p5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_p5_exp = p5_expected_prev;
	end
	if (
		( p6_expected_prev !== 1'bx ) && ( p6_prev !== p6_expected_prev )
		&& ((p6_expected_prev !== last_p6_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p6_expected_prev);
		$display ("     Real value = %b", p6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_p6_exp = p6_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mbr_circ1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
// wires                                               
wire f1;
wire f2;
wire p1;
wire p2;
wire p3;
wire p4;
wire p5;
wire p6;

wire sampler;                             

// assign statements (if any)                          
mbr_circ1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.f1(f1),
	.f2(f2),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6)
);

// a
always
begin
	a = 1'b0;
	a = #100000 1'b1;
	#100000;
end 

// b
always
begin
	b = 1'b0;
	b = #50000 1'b1;
	#50000;
end 

// c
always
begin
	c = 1'b0;
	c = #25000 1'b1;
	#25000;
end 

// d
always
begin
	d = 1'b0;
	d = #12500 1'b1;
	#12500;
end 

mbr_circ1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.sampler_tx(sampler)
);

mbr_circ1_vlg_check_tst tb_out(
	.f1(f1),
	.f2(f2),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.sampler_rx(sampler)
);
endmodule

