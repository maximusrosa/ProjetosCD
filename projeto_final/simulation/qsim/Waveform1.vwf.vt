// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/02/2024 14:12:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_final_vlg_sample_tst(
	c,
	x,
	y,
	sampler_tx
);
input [2:0] c;
input [3:0] x;
input [3:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(c or x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto_final_vlg_check_tst (
	B,
	cout,
	N,
	s,
	V,
	Z,
	sampler_rx
);
input  B;
input  cout;
input  N;
input [3:0] s;
input  V;
input  Z;
input sampler_rx;

reg  B_expected;
reg  cout_expected;
reg  N_expected;
reg [3:0] s_expected;
reg  V_expected;
reg  Z_expected;

reg  B_prev;
reg  cout_prev;
reg  N_prev;
reg [3:0] s_prev;
reg  V_prev;
reg  Z_prev;

reg  B_expected_prev;
reg  cout_expected_prev;
reg  N_expected_prev;
reg [3:0] s_expected_prev;
reg  V_expected_prev;
reg  Z_expected_prev;

reg  last_B_exp;
reg  last_cout_exp;
reg  last_N_exp;
reg [3:0] last_s_exp;
reg  last_V_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	B_prev = B;
	cout_prev = cout;
	N_prev = N;
	s_prev = s;
	V_prev = V;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	B_expected_prev = B_expected;
	cout_expected_prev = cout_expected;
	N_expected_prev = N_expected;
	s_expected_prev = s_expected;
	V_expected_prev = V_expected;
	Z_expected_prev = Z_expected;
end



// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected cout
initial
begin
	cout_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(B_expected or B or cout_expected or cout or N_expected or N or s_expected or s or V_expected or V or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B = %b | expected cout = %b | expected N = %b | expected s = %b | expected V = %b | expected Z = %b | ",B_expected_prev,cout_expected_prev,N_expected_prev,s_expected_prev,V_expected_prev,Z_expected_prev);
	$display("| real B = %b | real cout = %b | real N = %b | real s = %b | real V = %b | real Z = %b | ",B_prev,cout_prev,N_prev,s_prev,V_prev,Z_prev);
`endif
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_V_exp = V_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] c;
reg [3:0] x;
reg [3:0] y;
// wires                                               
wire B;
wire cout;
wire N;
wire [3:0] s;
wire V;
wire Z;

wire sampler;                             

// assign statements (if any)                          
projeto_final i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.c(c),
	.cout(cout),
	.N(N),
	.s(s),
	.V(V),
	.x(x),
	.y(y),
	.Z(Z)
);
// c[ 2 ]
initial
begin
	c[2] = 1'b1;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b1;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b1;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #15000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #25000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #15000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #30000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #15000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #25000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #10000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #15000 1'b1;
	x[3] = #5000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #10000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #35000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #5000 1'b1;
	x[3] = #15000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #35000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #15000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #15000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #35000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #30000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #5000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #15000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #10000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #25000 1'b1;
	x[2] = #15000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #10000 1'b1;
	x[2] = #5000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #10000 1'b1;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #15000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #30000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #15000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #15000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #25000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #15000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #5000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #5000 1'b0;
	x[1] = #10000 1'b1;
	x[1] = #10000 1'b0;
	x[1] = #10000 1'b1;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #25000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #40000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #25000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #15000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #15000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #25000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #15000 1'b0;
	x[0] = #35000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #15000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #15000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #15000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #10000 1'b0;
	x[0] = #5000 1'b1;
	x[0] = #5000 1'b0;
	x[0] = #10000 1'b1;
	x[0] = #5000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
end 

projeto_final_vlg_sample_tst tb_sample (
	.c(c),
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

projeto_final_vlg_check_tst tb_out(
	.B(B),
	.cout(cout),
	.N(N),
	.s(s),
	.V(V),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

